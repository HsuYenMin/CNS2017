from pwn import remote
import random
import hashlib
# prime
p = 262603487816194488181258352326988232210376591996146252542919605878805005469693782312718749915099841408908446760404481236646436295067318626356598442952156854984209550714670817589388406059285064542905718710475775121565983586780136825600264380868770029680925618588391997934473191054590812256197806034618157751903
def nextPasswordi(passwordi):
    if passwordi[2] < 20:
        passwordi[2] += 1
        return True
    elif passwordi[1] < 20:
        passwordi[1] += 1
        passwordi[2] = 1
        return True
    elif passwordi[0] < 20:
        passwordi[0] += 1
        passwordi[1] = 1
        passwordi[2] = 1
        return True
    else:
        return False


end = False
passwordi = [1,1,1]
a = 1
while not end:
    key = 0
    print(passwordi)
    password = [int(hashlib.sha512(str(i).encode()).hexdigest(), 16) for i in passwordi]
    r = remote("140.112.31.109",10002)
    for i, pwd in enumerate(password):
        # Diffie Hellman and g is generated by the password
        g = pow(pwd, 2, p)
        A = pow(g, a, p)    
        xs = r.recvuntil("to the server:").decode().split("\n")
        [print(line) for line in xs]
        B = int(xs[1].split()[2])
        print("B = ",B)
        K = pow(B, a, p)
        key ^= int(hashlib.sha512(str(K).encode()).hexdigest(), 16)
        r.sendline(str(A).encode())
        print("send A = ",A)
    xs = r.recvuntil("FLAG is: ")
    xs += r.recvline()
    xs = xs.decode()
    Flag = int(xs.strip('\n').split()[2])
    print(xs)
    print("Flag = ", Flag)
    possibleAns = hex(Flag ^ key)
    #if not len(possibleAns) % 2:
    arr = [int(possibleAns[i:i+2],16) for i in range(2,len(possibleAns)-1,2)]
    cc, np, u, l = 0, 0, 0, 0
    for i in arr:
        if i < 32:
            cc += 1
        elif i < 64:
            np += 1
        elif i < 96:
            u  += 1
        elif i < 128:
            l  += 1
    if cc < 2 and u + l > 8: 
        carr = [chr(i) for i in arr]
        with open("possibleFlags.txt", 'a') as f:
            f.write(''.join(carr)+'\n')
    r.close()
    end = not nextPasswordi(passwordi) 



